import tkinter as tk
from tkinter import messagebox
from datetime import datetime
import random
import psutil  # For system status (CPU, Memory)

# Sample vulnerabilities
vulnerabilities = [
    "Weak Password Detected", 
    "Open Port Found", 
    "Outdated Software Version", 
    "Suspicious Network Activity", 
    "Unpatched Vulnerability"
]

# Variable to control monitoring
monitoring = False

# Simulate Vulnerability Detection
def detect_vulnerability():
    if random.choice([True, False]):  # Randomly decide if a vulnerability is detected
        return random.choice(vulnerabilities)
    return None

# Log and Respond to Vulnerability
def log_and_heal(vulnerability):
    current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    log_entry = f"[{current_time}] Vulnerability Detected: {vulnerability}\n"
    response_entry = f"[{current_time}] Self-Healing Action: Resolved {vulnerability}\n"
    log_listbox.insert(tk.END, log_entry)
    log_listbox.insert(tk.END, response_entry)
    log_listbox.insert(tk.END, "-" * 40)  # Add a separator line for readability

# Simulate System Monitoring with GUI Update
def monitor_system():
    global monitoring
    monitoring = True
    detection_count = random.randint(3, 6)  # Random number of checks between 3 and 6
    log_listbox.insert(tk.END, f"Monitoring system... {detection_count} checks will be performed.\n")

    for _ in range(detection_count):
        if not monitoring:  # Stop monitoring if "Stop Monitoring" is clicked
            log_listbox.insert(tk.END, "Monitoring stopped.\n")
            break
        vulnerability = detect_vulnerability()
        if vulnerability:
            log_and_heal(vulnerability)
        else:
            current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            log_listbox.insert(tk.END, f"[{current_time}] No vulnerabilities detected.\n")
    
    if monitoring:
        log_listbox.insert(tk.END, "\nMonitoring complete. System is secure.\n")

# Stop Monitoring
def stop_monitoring():
    global monitoring
    monitoring = False

# Clear Logs
def clear_logs():
    log_listbox.delete(0, tk.END)

# Show System Status (CPU, Memory Usage)
def show_system_status():
    cpu_usage = psutil.cpu_percent(interval=1)
    memory_info = psutil.virtual_memory()
    system_status = f"CPU Usage: {cpu_usage}%\nMemory Usage: {memory_info.percent}%"
    messagebox.showinfo("System Status", system_status)

# GUI Setup
root = tk.Tk()
root.title("Self-Healing Cybersecurity System")
root.geometry("600x500")

# Header Label
header_label = tk.Label(root, text="Self-Healing Cybersecurity System", font=("Arial", 16))
header_label.pack(pady=10)

# Start Monitoring Button
start_button = tk.Button(root, text="Start Monitoring", command=monitor_system, bg="lightblue", font=("Arial", 12))
start_button.pack(pady=5)

# Stop Monitoring Button
stop_button = tk.Button(root, text="Stop Monitoring", command=stop_monitoring, bg="lightcoral", font=("Arial", 12))
stop_button.pack(pady=5)

# Clear Logs Button
clear_button = tk.Button(root, text="Clear Logs", command=clear_logs, bg="lightgreen", font=("Arial", 12))
clear_button.pack(pady=5)

# Show System Status Button
status_button = tk.Button(root, text="View System Status", command=show_system_status, bg="lightyellow", font=("Arial", 12))
status_button.pack(pady=5)

# Log Label
log_label = tk.Label(root, text="System Log", font=("Arial", 14))
log_label.pack(pady=5)

# Log Listbox for displaying vulnerability and self-healing actions
log_listbox = tk.Listbox(root, width=80, height=15, font=("Arial", 10))
log_listbox.pack(pady=5)

# Footer
footer_label = tk.Label(root, text="System Monitoring & Self-Healing Actions", font=("Arial", 10, "italic"))
footer_label.pack(side=tk.BOTTOM, pady=10)

# Run the GUI loop
root.mainloop()
